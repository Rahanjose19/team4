"use client"
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/5xo071193NB
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { DM_Sans } from 'next/font/google'
import { Rethink_Sans } from 'next/font/google'

dm_sans({
  subsets: ['latin'],
  display: 'swap',
})

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button"
import { CardContent, Card, CardTitle, CardHeader } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Select } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { TableHead, TableRow, TableHeader, TableCell, TableBody, Table } from "@/components/ui/table"
import { AllotmentAddModal } from "./allotment-add-modal"
import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"

export function Hero() {
  
  const [isOpen , setIsOpen] = useState(false);
  const [reducedData, setReducedData] = useState([]);
  const [logs , setLogs] = useState([]);
  const [open, setOpen] = useState(false);
const [selectedMessage, setSelectedMessage] = useState('');

const handleClick = (message) => {
  setSelectedMessage(message);
  setOpen(true);
};

const handleClose = () => {
  setOpen(false);
};

  const router = useRouter();

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch("/api/logs");
      const data = await response.json();
      console.log(data);
      setLogs(data);
    };
    fetchData();
  }, []);
  return (

    (<main className="flex flex-col gap-8 p-6 md:p-8 lg:p-10">
      {
        isOpen && <AllotmentAddModal enrollments={reducedData} setIsOpen={setIsOpen} />
      }
      <header className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Actions</h1>
      </header>
      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        <div className="col-span-2 md:col-span-1 lg:col-span-2">
          <div className="grid grid-cols-1 gap-4">
            
            <Card>
              <CardContent className="flex flex-col gap-4">
                <div>
                  <h3 className="text-lg font-medium">Add NRI application</h3>
                  <p className="text-gray-500 dark:text-gray-400">
                    Provide Details and submit the application for NRI students.
                  </p>
                </div>
                <Button variant="outline" onClick={(e)=>{
                  e.preventDefault();
                  router.push('/nri/add')
                
                }} >New Application</Button>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="flex flex-col gap-4">
                <div>
                  <h3 className="text-lg font-medium">Upload CEE allotments</h3>
                  <p className="text-gray-500 dark:text-gray-400">
                    Upload the allotment for merit , management and other quotas.
                  </p>
                </div>
                <Button onClick={(e)=>{
                  e.preventDefault();
                  router.push('/actions/upload-allot')
                }}
                variant="outline">Upload</Button>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="flex flex-col gap-4">
                <div>
                  <h3 className="text-lg font-medium">Allot Seats for NRI</h3>
                  <p className="text-gray-500 dark:text-gray-400">
                    Approve seats for NRI based on their percentage and priority.
                  </p>
                </div>
                <Button variant="outline"
                  onClick={async () => {
                    console.log("Allot NRI");
                    const res = await fetch(`/api/actions/nri-allot`)

                    if (res.ok) {
                      const data = await res.json();
                      console.log("Allot NRI success" , data);
                      const reducedData = data.allotments.map(item => ({
                        courseId: item.courseId,
                        allotments: data.allotments.filter(i => i.courseId === item.courseId).length,
                      }));
                      setReducedData(reducedData);
                      setIsOpen(true);

                             
                    }

                  }
                }
                >Allot NRI</Button>
              </CardContent>
            </Card>
          </div>
        </div>
        <div className="col-span-1 md:col-span-1 lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle>Manage</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2 flex flex-col">
                <Label htmlFor="action">Action</Label>
                  <Button className="size-30 bg-slate-500 " onClick={(e)=>{
                    e.preventDefault();
                    router.push('/courseinfo')
                  }}>Courses</Button>
                  <Button className="size-30 bg-slate-500" onClick={(e)=>{
                  e.preventDefault();
                  router.push('/edit')
                }}>Quotas</Button>
                  <Button className="size-30 bg-slate-500">Applicants</Button>
                  <Button className="size-30 bg-slate-500">Allotments</Button>
              </div>
              <div className="space-y-2">
                <Input id="log" placeholder="log item" type="text" />
              </div>
              <Button className="w-full"
                onClick={async () => {
                  const log = document.getElementById("log").value;
                  const res = await fetch(`/api/logs`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ action:"display", message: log }),
                  });

                  if (res.ok) {
                    const data = await res.json();
                    console.log("Log success" , data);
                    setLogs([...logs, data]);
                  }
                }}
              >Add to Log</Button>
            </CardContent>
          </Card>
        </div>
      </div>
      <div>
        <Card>
          <CardHeader>
            <CardTitle>Logs</CardTitle>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Action</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>NRI Students Allotted</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                { logs.map((log, index) => (
                <TableRow key={index} onClick={() => handleClick(log.message)}>
                  <TableCell>{log.action ? log.action : "Allotment"}</TableCell>
                  <TableCell>{(new Date(log.createdAt)).toLocaleString()}</TableCell>
                  <TableCell>{log.message.split(',')[0]}</TableCell>

                </TableRow>
                ))  
              }
{   open && <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="relative w-full max-w-md rounded-lg bg-white p-6 dark:bg-gray-900">
        <button
          aria-label="Close"
          className="absolute top-4 right-4 rounded-full p-2 transition-colors hover:bg-gray-100 dark:hover:bg-gray-800"
          onClick={handleClose}
        >
          <XIcon className="h-4 w-4" />
        </button>
        <div className="space-y-4 text-center">
        {selectedMessage.split(',').map((line, index) => (
          <p key={index} className="text-gray-500 dark:text-gray-400">{line}</p>
        ))}
      </div>
      </div>
    </div>
}     
         </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
    </main>)
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}